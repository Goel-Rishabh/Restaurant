
import React, { useEffect } from 'react'
import messaging from '@react-native-firebase/messaging';
import AsyncStorage from '@react-native-community/async-storage';
import storageKeys from '../constants/storageKeys';
// import AsyncStorage from '@react-native-community/async-storage';
import PushNotificationIOS from "@react-native-community/push-notification-ios";
import colors from '../constants/colors';
var PushNotification = require("react-native-push-notification");
import MaterialIcon from 'react-native-vector-icons/Entypo'

export const checkPermission = async() => {
    const enabled = await messaging().hasPermission();
    if (enabled) {
        return true
    } else {
        return false
    }
}

export const requestPermission = async() => {
    try {
        await messaging().requestPermission();
        // User has authorised
        return true
    } catch (error) {
        // User has rejected permissions
        return false
    }
}

export const getToken = async() => {
    fcmToken = await messaging().getToken();
    return fcmToken
}

export const foregroundMessage = (remoteMessage) => {
    AsyncStorage.setItem(storageKeys.NOTIFICATION,JSON.stringify(remoteMessage))
    sendNotification(remoteMessage.data.title,remoteMessage.data.body,remoteMessage.data.message)
}

export const backgroundMessage = (remoteMessage) => {
    AsyncStorage.setItem(storageKeys.NOTIFICATION,JSON.stringify(remoteMessage))
    console.log("background",remoteMessage.data)

    sendNotification(remoteMessage.data.title,remoteMessage.data.body,remoteMessage.data.message)
}

export const configure=()=>{
    
    PushNotification.configure({
        // (optional) Called when Token is generated (iOS and Android)
        onRegister: function (token) {
          console.log("TOKEN:", token);
        },
       
        // (required) Called when a remote is received or opened, or local notification is opened
        onNotification: function (notification) {
          console.log("NOTIFICATION:", notification);
       
          // process the notification
       
          // (required) Called when a remote is received or opened, or local notification is opened
          notification.finish(PushNotificationIOS.FetchResult.NoData);
        },
       
        // IOS ONLY (optional): default: all - Permissions to register.
        permissions: {
          alert: true,
          badge: true,
          sound: true,
        },
       
        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,
       
        /**
         * (optional) default: true
         * - Specified if permissions (ios) and token (android and ios) will requested or not,
         * - if not, you must call PushNotificationsHandler.requestPermissions() later
         * - if you are not using remote notification or do not have Firebase installed, use this:
         *     requestPermissions: Platform.OS === 'ios'
         */
        requestPermissions: true,
    });
}


export const sendNotification = (title,body,message)=>{
    PushNotification.localNotification({
        /* Android Only Properties */
        id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        // largeIcon: "ic_notificationicon", // (optional) default: "ic_launcher"
        smallIcon: "ic_notificationicon" , // (optional) default: "ic_notification" with fallback for "ic_launcher"
        bigText: message, // (optional) default: "message" prop
        // subText: "This is a subText", // (optional) default: none
        color:colors.TILE, // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        tag: "some_tag", // (optional) add tag to message
        group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        priority: "high", // (optional) set notification priority, default: high
        visibility: "private", // (optional) set notification visibility, default: private
        importance: "high", // (optional) set notification importance, default: high
        allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
        ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
       
        /* iOS only properties */
        alertAction: "view", // (optional) default: view
        category: "", // (optional) default: empty string
        userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
       
        /* iOS and Android properties */
        title: title, // (optional)
        message: body, // (required)
        playSound: true, // (optional) default: true
        soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        number: 1, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        // repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        // actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
      });
  }